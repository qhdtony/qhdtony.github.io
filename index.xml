<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>专注当下</title><link>https://qhdtony.github.io/</link><description>Recent content on 专注当下</description><generator>Hugo -- 0.148.2</generator><language>en-us</language><lastBuildDate>Sat, 23 Aug 2025 14:42:20 +0800</lastBuildDate><atom:link href="https://qhdtony.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Laravel Ioc</title><link>https://qhdtony.github.io/posts/laravel-ioc/</link><pubDate>Sat, 23 Aug 2025 14:42:20 +0800</pubDate><guid>https://qhdtony.github.io/posts/laravel-ioc/</guid><description>&lt;p>一、什么是Ioc容器。&lt;/p>
&lt;p>负责对象的创建和依赖管理，在这个容器里，不需要手动处理类之间的依赖关系。&lt;/p>
&lt;pre tabindex="0">&lt;code>IoC 容器的作用
1. 解耦
* 类不再自己去实例化依赖，而是通过容器自动注入。
* 方便替换实现（如接口绑定不同的实现类）。
2. 依赖管理
* 统一在容器中管理依赖关系，避免到处 new。
3. 服务解析
* 通过容器 make() 方法即可解析并返回对象。
Laravel IoC 容器本质上就是一个 依赖管理器，它维护一个 绑定表（bindings）和一个 实例表（instances），解析时通过：
1. 查看有没有绑定
2. 如果没有绑定，就通过 反射机制 自动实例化对象，并递归解析其依赖
核心文件：
* Illuminate\Container\Container
&lt;/code>&lt;/pre>&lt;p>二、原理对比理解。&lt;/p>
&lt;p>1、普通写法&lt;/p>
&lt;pre tabindex="0">&lt;code>/*
需求：
你想开车出门。
你得自己造一台车（发动机、轮胎、车门都要自己组装）。
想换车？那你又得重新造一台
即需要动业务代码
*/
class Driver {
public function __construct() {
$this-&amp;gt;car = new BMW();//每次都要改类
}
public function drive() {
$this-&amp;gt;car-&amp;gt;run();
}
}
(new Driver())-&amp;gt;drive();
Driver 固定绑定 了 BMW，想换成 Tesla 必须改源码。
这样写也是可以的，为了创建灵活的环境，可以直接在Driver::__construct()的构造函数里添加字符参数。
类似于:
class Driver {
public function __construct($carname) {
$this-&amp;gt;car = new BMW($carname);//每次都要New
}
public function drive() {
$this-&amp;gt;car-&amp;gt;run();
}
}
(new Driver(&amp;#34;civic&amp;#34;))-&amp;gt;drive();
但是框架不会这样简单考虑，因为一个字符串还要去维护（例如放到数组里），没有显示表达出来。
这里说的显示表达类似于laravel里面的：
$this-&amp;gt;app-&amp;gt;bind(Car::class, Tesla::class);
&lt;/code>&lt;/pre>&lt;p>2、控制反转写法&lt;/p></description></item><item><title>Docker Config</title><link>https://qhdtony.github.io/posts/docker-config/</link><pubDate>Mon, 18 Aug 2025 18:30:44 +0800</pubDate><guid>https://qhdtony.github.io/posts/docker-config/</guid><description>&lt;p>今天有个老项目要用到PHP7.4 环境，官方已经不建议了。
做一个笔记总结一下遇到的坑&lt;/p>
&lt;h6 id="零文件结构大概这样">零、文件结构大概这样：&lt;/h6>
&lt;pre tabindex="0">&lt;code>lnmp-docker/
├── docker-compose.yml
├── nginx/
│ └── default.conf
├── php/
│ └── Dockerfile
└── src/
└── index.php
&lt;/code>&lt;/pre>&lt;h6 id="一版本过低的问题">一、版本过低的问题&lt;/h6>
&lt;p>一直报错的是 xdebug 装不上，我就抛弃了 xdebug&lt;/p>
&lt;p>环境比调试用得更多。&lt;/p>
&lt;h6 id="二镜像源的问题">二、镜像源的问题&lt;/h6>
&lt;pre tabindex="0">&lt;code>设置-docker engine
{
&amp;#34;builder&amp;#34;: {
&amp;#34;gc&amp;#34;: {
&amp;#34;defaultKeepStorage&amp;#34;: &amp;#34;20GB&amp;#34;,
&amp;#34;enabled&amp;#34;: true
}
},
&amp;#34;experimental&amp;#34;: false,
&amp;#34;registry-mirrors&amp;#34;: [
&amp;#34;https://docker.m.daocloud.io&amp;#34;,
&amp;#34;https://hub-mirror.c.163.com&amp;#34;,
&amp;#34;https://mirror.baidubce.com&amp;#34;
]
}
&lt;/code>&lt;/pre>&lt;h6 id="三服务内调用的问题-redis">三、服务内调用的问题-redis&lt;/h6>
&lt;pre tabindex="0">&lt;code>
Fatal error: Uncaught RedisException: Connection refused in index.php: Stack trace: #0 Redis-&amp;gt;connect(&amp;#39;127.0.0.1&amp;#39;, 6379) #1 {main} thrown in /var/www/html/index.php on line 5`
代码里把 127.0.0.1 写成 redis, 服务名称叫 lnmp-redis
&lt;/code>&lt;/pre>&lt;h6 id="四代码同步的问题">四、代码同步的问题&lt;/h6>
&lt;p>本地设置的目录是 src
volumes 映射的目录是 /var/www/html
一般改了src的文件， docker里面的映射目录会立即更新&lt;/p></description></item><item><title>Hugoguide</title><link>https://qhdtony.github.io/posts/hugoguide/</link><pubDate>Sun, 17 Aug 2025 14:11:40 +0800</pubDate><guid>https://qhdtony.github.io/posts/hugoguide/</guid><description>&lt;pre tabindex="0">&lt;code>cd ~/hugo-blog #我自己的博客本地目录
#创建文章
#content/posts/hello-world.md
hugo new posts/hello-world.md
#修改文章
#文章头部 draft 为 true 文章会变成草稿，推到远端，会不显示。如果要发布，需要改成 false
date = &amp;#39;2025-08-17T14:11:40+08:00&amp;#39;
draft = false
title = &amp;#39;Hugoguide&amp;#39;
tags = [&amp;#34;hugo&amp;#34;, &amp;#34;标签&amp;#34;]
#文章内容
建议用markdown支持的编辑器
#本地预览，
本地预览之后，需要执行 hugo --config hugo.toml --cleanDestinationDir --minify
不执行上一行命令，远端 xxx.github.io 可能会跳转不正常
hugo server -D
#上传github前的准备 这个时候就不要本地预览了，如果预览，还得执行一下生成远端文件命令
#生成远端文件命令
hugo --config hugo.toml --cleanDestinationDir --minify
#进入到目录，准备推送
cd ./public
#推送操作
git add|commit|push ... 等一系列命令
-------------------------------------
修改完 hugo.toml 后，重新执行：
hugo --cleanDestinationDir
&lt;/code>&lt;/pre></description></item><item><title>PHP Hong</title><link>https://qhdtony.github.io/posts/php-hong/</link><pubDate>Sun, 17 Aug 2025 12:38:36 +0800</pubDate><guid>https://qhdtony.github.io/posts/php-hong/</guid><description>&lt;p>在C里面，
宏是 C 语言的 预处理器指令（#define）。
编译前，预处理器会把宏替换成对应的代码文本。
宏：SQUARE(x) &amp;lt;=转换成=&amp;gt; 实际： ((5)*(5))&lt;/p>
&lt;p>我理解，就是一类方法经常用，建立的接口标准，方便外部调用.
也可以理解为语法糖，中间层。&lt;/p>
&lt;pre tabindex="0">&lt;code>#define PI 3.14159
#define SQUARE(x) ((x)*(x))
printf(&amp;#34;%f\n&amp;#34;, SQUARE(5)); // 实际展开成 ((5)*(5))
&lt;/code>&lt;/pre>&lt;p>在PHP里面内核中的宏作用
用来简化zval操作、隐藏结构细节。否则每次写zval都得操作内部结构，太复杂也容易出错。&lt;/p>
&lt;p>&lt;strong>0、回顾一下zval结构(简化)。&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>typedef struct _zval_struct {
zend_value value; // 变量的值 (联合体)
union {
struct {
ZEND_ENDIAN_LOHI_4(
zend_uchar type, // 类型信息 IS_LONG/IS_STRING/...
zend_uchar type_flags,
zend_uchar const_flags,
zend_uchar reserved
)
} v;
uint32_t type_info;
} u1;
union {
uint32_t next; // GC链表/HashTable索引
uint32_t cache_slot; // opcode缓存槽
uint32_t lineno; // 常量声明行号
} u2;
} zval;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>typedef union _zend_value {
zend_long lval; // 整数
double dval; // 浮点数
zend_refcounted *counted; // 引用计数类型 (字符串、数组、对象等)
zend_string *str; // 字符串
zend_array *arr; // 数组
zend_object *obj; // 对象
zend_resource *res; // 资源
...
} zend_value;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>1、简化 zval操作&lt;/strong>&lt;/p></description></item></channel></rss>